{"version":3,"sources":["webpack:///website/components/website/components/codemirror.vue","webpack:///website/components/website/components/question.vue","webpack:///website/website/app.vue"],"names":[],"mappings":"AA4LA,gBACA,WAAA,CACA,YAAA,CACA,iBACA,CAEA,4BACA,WAAA,CACA,SACA,CAEA,6CACA,gBACA,CAEA,kCACA,iBAAA,CACA,SAAA,CACA,UAAA,CACA,QAAA,CACA,eACA,CCxFA,6BACA,kBACA,CACA,sBACA,iBAAA,CACA,YAAA,CACA,sBAAA,CACA,eACA,CACA,0BACA,WACA,CAEA,uBACA,UACA,CAEA,wBACA,aAAA,CACA,gBAAA,CACA,eAAA,CACA,UACA,CAEA,oBACA,eACA,CAEA,wCAEA,cAAA,CACA,WAAA,CACA,qBACA,CAEA,4EAEA,gBACA,CAEA,wCACA,kBACA,CAEA,+CACA,eACA,CAEA,mFAEA,aACA,CAEA,kCACA,aAAA,CACA,aAAA,CACA,iBAAA,CACA,oBACA,CAEA,wCACA,aACA,CAEA,0CACA,aACA,CCvJA,GACA,SAAA,CACA,QACA,CAEA,GACA,eACA,CAEA,MACA,gBACA,CAEA,GACA,eACA,CAEA,MAEA,eACA,CAIA,iCACA,UAAA,CACA,gBAAA,CACA,eAAA,CACA,aACA,CAEA,wBACA,iBAAA,CACA,YAAA,CACA,cAAA,CACA,eACA","file":"index.7f89f74d.css","sourcesContent":["<template>\r\n  <div class=\"in-coder-panel\">\r\n    <textarea ref=\"textarea\"></textarea>\r\n    <el-select class=\"code-mode-select\" v-model=\"mode\" @change=\"changeMode\">\r\n      <el-option\r\n        v-for=\"mode in modes\"\r\n        :key=\"mode.value\"\r\n        :label=\"mode.label\"\r\n        :value=\"mode.value\"\r\n      >\r\n      </el-option>\r\n    </el-select>\r\n  </div>\r\n</template>\r\n\r\n<script type=\"text/ecmascript-6\">\r\n// 引入全局实例\r\nimport _CodeMirror from 'codemirror'\r\n\r\n// 核心样式\r\nimport 'codemirror/lib/codemirror.css'\r\n// 引入主题后还需要在 options 中指定主题才会生效\r\nimport 'codemirror/theme/cobalt.css'\r\n\r\n// 需要引入具体的语法高亮库才会有对应的语法高亮效果\r\n// codemirror 官方其实支持通过 /addon/mode/loadmode.js 和 /mode/meta.js 来实现动态加载对应语法高亮库\r\n// 但 vue 貌似没有无法在实例初始化后再动态加载对应 JS ，所以此处才把对应的 JS 提前引入\r\nimport 'codemirror/mode/javascript/javascript.js'\r\nimport 'codemirror/mode/css/css.js'\r\nimport 'codemirror/mode/xml/xml.js'\r\nimport 'codemirror/mode/clike/clike.js'\r\nimport 'codemirror/mode/markdown/markdown.js'\r\nimport 'codemirror/mode/python/python.js'\r\nimport 'codemirror/mode/r/r.js'\r\nimport 'codemirror/mode/shell/shell.js'\r\nimport 'codemirror/mode/sql/sql.js'\r\nimport 'codemirror/mode/swift/swift.js'\r\nimport 'codemirror/mode/vue/vue.js'\r\n\r\n// 尝试获取全局实例\r\nconst CodeMirror = window.CodeMirror || _CodeMirror\r\n\r\nexport default {\r\n  name: 'in-coder',\r\n  props: {\r\n    // 外部传入的内容，用于实现双向绑定\r\n    value: String,\r\n    // 外部传入的语法类型\r\n    language: {\r\n      type: String,\r\n      default: null\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      // 内部真实的内容\r\n      code: '',\r\n      // 默认的语法类型\r\n      mode: 'javascript',\r\n      // 编辑器实例\r\n      coder: null,\r\n      // 默认配置\r\n      options: {\r\n        // 缩进格式\r\n        tabSize: 2,\r\n        // 主题，对应主题库 JS 需要提前引入\r\n        theme: 'cobalt',\r\n        // 显示行号\r\n        lineNumbers: true,\r\n        line: true\r\n      },\r\n      // 支持切换的语法高亮类型，对应 JS 已经提前引入\r\n      // 使用的是 MIME-TYPE ，不过作为前缀的 text/ 在后面指定时写死了\r\n      modes: [\r\n        {\r\n          value: 'css',\r\n          label: 'CSS'\r\n        },\r\n        {\r\n          value: 'javascript',\r\n          label: 'Javascript'\r\n        },\r\n        {\r\n          value: 'html',\r\n          label: 'XML/HTML'\r\n        },\r\n        {\r\n          value: 'x-java',\r\n          label: 'Java'\r\n        },\r\n        {\r\n          value: 'x-objectivec',\r\n          label: 'Objective-C'\r\n        },\r\n        {\r\n          value: 'x-python',\r\n          label: 'Python'\r\n        },\r\n        {\r\n          value: 'x-rsrc',\r\n          label: 'R'\r\n        },\r\n        {\r\n          value: 'x-sh',\r\n          label: 'Shell'\r\n        },\r\n        {\r\n          value: 'x-sql',\r\n          label: 'SQL'\r\n        },\r\n        {\r\n          value: 'x-swift',\r\n          label: 'Swift'\r\n        },\r\n        {\r\n          value: 'x-vue',\r\n          label: 'Vue'\r\n        },\r\n        {\r\n          value: 'markdown',\r\n          label: 'Markdown'\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  mounted() {\r\n    // 初始化\r\n    this._initialize()\r\n  },\r\n  methods: {\r\n    // 初始化\r\n    _initialize() {\r\n      // 初始化编辑器实例，传入需要被实例化的文本域对象和默认配置\r\n      this.coder = CodeMirror.fromTextArea(this.$refs.textarea, this.options)\r\n      // 编辑器赋值\r\n      this.coder.setValue(this.value || this.code)\r\n\r\n      // 支持双向绑定\r\n      this.coder.on('change', coder => {\r\n        this.code = coder.getValue()\r\n\r\n        if (this.$emit) {\r\n          this.$emit('input', this.code)\r\n        }\r\n      })\r\n\r\n      // 尝试从父容器获取语法类型\r\n      if (this.language) {\r\n        // 获取具体的语法类型对象\r\n        let modeObj = this._getLanguage(this.language)\r\n\r\n        // 判断父容器传入的语法是否被支持\r\n        if (modeObj) {\r\n          this.mode = modeObj.label\r\n        }\r\n      }\r\n    },\r\n    // 获取当前语法类型\r\n    _getLanguage(language) {\r\n      // 在支持的语法类型列表中寻找传入的语法类型\r\n      return this.modes.find(mode => {\r\n        // 所有的值都忽略大小写，方便比较\r\n        let currentLanguage = language.toLowerCase()\r\n        let currentLabel = mode.label.toLowerCase()\r\n        let currentValue = mode.value.toLowerCase()\r\n\r\n        // 由于真实值可能不规范，例如 java 的真实值是 x-java ，所以讲 value 和 label 同时和传入语法进行比较\r\n        return (\r\n          currentLabel === currentLanguage || currentValue === currentLanguage\r\n        )\r\n      })\r\n    },\r\n    // 更改模式\r\n    changeMode(val) {\r\n      // 修改编辑器的语法配置\r\n      this.coder.setOption('mode', `text/${val}`)\r\n\r\n      // 获取修改后的语法\r\n      let label = this._getLanguage(val).label.toLowerCase()\r\n\r\n      // 允许父容器通过以下函数监听当前的语法值\r\n      this.$emit('language-change', label)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"css\">\r\n.in-coder-panel {\r\n  flex-grow: 1;\r\n  display: flex;\r\n  position: relative;\r\n}\r\n\r\n.in-coder-panel .CodeMirror {\r\n  flex-grow: 1;\r\n  z-index: 1;\r\n}\r\n\r\n.in-coder-panel .CodeMirror .CodeMirror-code {\r\n  line-height: 19px;\r\n}\r\n\r\n.in-coder-panel .code-mode-select {\r\n  position: absolute;\r\n  z-index: 2;\r\n  right: 10px;\r\n  top: 10px;\r\n  max-width: 130px;\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"c-question\">\r\n    <div class=\"question-info\">\r\n      <div class=\"top-row row\" v-if=\"!!level || (tags && tags.length)\">\r\n        <div class=\"level-info\" v-if=\"!!level\">\r\n          <div class=\"title\">难度</div>\r\n          <div class=\"content\">{{ level }}</div>\r\n        </div>\r\n        <div class=\"tag-ctn\" v-if=\"tags && tags.length\">\r\n          <div class=\"title\">标签</div>\r\n          <div class=\"content\">\r\n            <ul class=\"tag-list\">\r\n              <li class=\"tag-item\" v-for=\"(t, idx) in tags\" :key=\"idx\">\r\n                <span>{{ t.value }}</span>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"question-description row\">\r\n        <div class=\"title\">题目</div>\r\n        <div class=\"content\">{{ description }}</div>\r\n      </div>\r\n      <div class=\"question-params row\">\r\n        <div class=\"title\">输入</div>\r\n        <div class=\"content\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>参数名</th>\r\n                <th>类型</th>\r\n                <th>描述</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(p, idx) in params\" :key=\"idx\">\r\n                <td>{{ p.name || 'undefined' }}</td>\r\n                <td>\r\n                  {{ p.type && p.type.names ? p.type.names.join(',') : 'any' }}\r\n                </td>\r\n                <td>{{ p.description || 'undefined' }}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n      <div class=\"question-returns row\">\r\n        <div class=\"title\">输出</div>\r\n        <div class=\"content\">\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <th>类型</th>\r\n                <th>描述</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr v-for=\"(r, idx) in returns\" :key=\"idx\">\r\n                <td>\r\n                  {{ r.type && r.type.names ? r.type.names.join(',') : 'any' }}\r\n                </td>\r\n                <td>{{ r.description || 'undefined' }}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"code row\">\r\n      <div class=\"title\">代码</div>\r\n      <div class=\"content\">\r\n        <Codemirror v-if=\"openCode\" :value=\"question.code\" />\r\n        <a\r\n          class=\"toggle-code-btn\"\r\n          href=\"\"\r\n          @click.prevent=\"openCode = !openCode\"\r\n          >{{ openCode ? `收起代码 ↑` : '查看代码 ↓' }}</a\r\n        >\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Codemirror from './codemirror'\r\nexport default {\r\n  components: {\r\n    Codemirror\r\n  },\r\n  props: {\r\n    question: {}\r\n  },\r\n  data() {\r\n    return {\r\n      openCode: false\r\n    }\r\n  },\r\n  computed: {\r\n    description() {\r\n      return this.question.comment.description\r\n    },\r\n    params() {\r\n      return this.question.comment.params\r\n    },\r\n    returns() {\r\n      return this.question.comment.returns\r\n    },\r\n    level() {\r\n      let tags = this.question.comment.tags || []\r\n      let levelTag = tags.find(i => i.title === 'level')\r\n      return levelTag ? levelTag.value : null\r\n    },\r\n    tags() {\r\n      let tags = this.question.comment.tags || []\r\n      return tags.filter(i => i.title === 'tag')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"css\" scoped>\r\n.c-question {\r\n  margin-bottom: 20px;\r\n}\r\n.row {\r\n  margin-bottom: 8px;\r\n  display: flex;\r\n  align-items: flex-start;\r\n  line-height: 1.5;\r\n}\r\n.content {\r\n  flex-grow: 1;\r\n}\r\n\r\ntable {\r\n  width: 100%;\r\n}\r\n\r\n.title {\r\n  flex-shrink: 0;\r\n  margin-right: 8px;\r\n  font-weight: bold;\r\n  color: #666;\r\n}\r\n\r\nth {\r\n  font-weight: bold;\r\n}\r\n\r\ntd,\r\nth {\r\n  min-width: 90px;\r\n  padding: 5px;\r\n  border: 1px solid #ccc;\r\n}\r\n\r\ntd:not(:first-child),\r\nth:not(:first-child) {\r\n  border-left: none;\r\n}\r\n\r\nthead tr:last-child th {\r\n  border-bottom: none;\r\n}\r\n\r\ntbody tr:not(:first-child) td {\r\n  border-top: none;\r\n}\r\n\r\n.question-params .title,\r\n.question-returns .title {\r\n  padding: 5px 0;\r\n}\r\n\r\n.toggle-code-btn {\r\n  color: #00965e;\r\n  display: block;\r\n  text-align: center;\r\n  text-decoration: none;\r\n}\r\n\r\n.toggle-code-btn:hover {\r\n  color: #004a2e;\r\n}\r\n\r\n.toggle-code-btn:visited {\r\n  color: #00965e;\r\n}\r\n</style>\r\n","<template>\r\n  <div class=\"main-container\">\r\n    <div class=\"title\">\r\n      Questions\r\n    </div>\r\n    <div class=\"question-list\">\r\n      <Question\r\n        v-for=\"(q, idx) in sortedQuestion\"\r\n        :key=\"idx\"\r\n        :question=\"q.default\"\r\n      />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport questions from './get-questions'\r\nimport Question from './components/question'\r\n\r\nexport default {\r\n  components: {\r\n    Question\r\n  },\r\n  data() {\r\n    return {\r\n      questions\r\n    }\r\n  },\r\n  computed: {\r\n    sortedQuestion() {\r\n      return this.questions\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style lang=\"css\">\r\nul {\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\nli {\r\n  list-style: none;\r\n}\r\n\r\ntable {\r\n  border-spacing: 0;\r\n}\r\n\r\nth {\r\n  font-weight: normal;\r\n}\r\n\r\nth,\r\ntd {\r\n  text-align: left;\r\n}\r\n</style>\r\n\r\n<style lang=\"css\" scoped>\r\n.main-container {\r\n  width: 80vw;\r\n  max-width: 1200px;\r\n  min-width: 600px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.title {\r\n  text-align: center;\r\n  padding: 20px;\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n}\r\n</style>\r\n"]}